name: Node.js CI for ThreadGen Backend

# Controls when the workflow will run
on:
  push:
    branches: [ master, main, develop ] # ADDED 'master' HERE
  pull_request:
    branches: [ master, main, develop ] # AND HERE (if you use PRs to master
    
jobs:
  build-and-test:
    runs-on: ubuntu-latest # Use the latest Ubuntu runner provided by GitHub

    strategy:
      matrix:
        node-version: [20.x] # Test only against Node.js version 20.x

    # Define services (databases, message queues) needed for your tests
    services:
      mongo:
        image: mongo:latest # Use the latest official MongoDB image
        ports:
          - 27017:27017 # Map container port 27017 to host port 27017
        # Health check to ensure MongoDB is ready before tests start
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand(\"ping\").ok'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
      rabbitmq:
        image: rabbitmq:3-management # Use RabbitMQ image with the management plugin
        ports:
          - 5672:5672   # AMQP port for RabbitMQ
          - 15672:15672 # Management UI port (optional)
        # Health check to ensure RabbitMQ is ready
        options: >-
          --health-cmd "rabbitmq-diagnostics -q check_running && rabbitmq-diagnostics -q check_local_alarms"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    # Step 1: Checkout your repository code
    - name: Checkout repository
      uses: actions/checkout@v4 # Official GitHub Action to checkout code

    # Step 2: Set up Node.js (single version specified in matrix)
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm' # Enable caching for npm dependencies to speed up builds

    # Step 3: Install project dependencies
    - name: Install dependencies
      run: npm ci # 'npm ci' is recommended for CI for faster, more reliable installs

    # Step 4: Run your tests
    - name: Run tests
      run: npm test # This will execute the "test" script from your package.json
      env:
        # Define environment variables your application/tests need to connect to services
        # These point to the services defined above (mongo, rabbitmq)
        MONGODB_URI: mongodb://localhost:27017/threadgen_test_db # Use 'localhost' as services run on the same network
        RABBITMQ_URI: amqp://localhost:5672
        NODE_ENV: test # Often good to set NODE_ENV to 'test'
        # Ensure your application code (e.g., mongodb.js, utils/rabbitmq.js)
        # is configured to read these environment variables from process.env.

    # Optional Step 5: Upload code coverage report (Example using Codecov)
    # If you don't want to use Codecov or a similar service, you can delete this entire step.
    # If you keep it, you'll need to set up Codecov and add a CODECOV_TOKEN
    # to your GitHub repository secrets (Settings > Secrets and variables > Actions).
    # - name: Upload coverage to Codecov
    #   uses: codecov/codecov-action@v4
    #   with:
    #     token: ${{ secrets.CODECOV_TOKEN }}